{"version":3,"sources":["components/turtlecanvas.jsx","components/configuration.jsx","components/App.js","reportWebVitals.js","reducers/settings.js","reducers/logistic.js","reducers/index.js","index.js"],"names":["colors","gradient","TurtleCanvas","settings","useSelector","state","dispatch","useDispatch","lowerBound","upperBound","zoom","numRuns","angle","startSeed","growth","strandSize","alpha","Turtle","animated","width","height","pixelated","draw","turtle","home","goto","i","_ctx","globalAlpha","logistic","r","x","penup","pendown","type","setcolor","length","growthModifier","j","forward","right","logisticRun","stroke","style","minHeight","Configuration","initialValues","textAlign","onSubmit","size","margin","id","inputLabel","name","focus","fluid","errorPrompt","step","primary","loading","Math","round","App","querystring","window","location","search","className","Sidebar","Pushable","as","Segment","Menu","animation","icon","visible","Pusher","basic","backgroundColor","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","reducer","action","newState","url","URL","Object","keys","forEach","key","searchParams","set","history","pushState","params","URLSearchParams","value","parseFloat","reducers","middleware","thunk","middlewareEnhancer","applyMiddleware","store","createStore","combineReducers","composeWithDevTools","console","log","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.693109b4.chunk.js","sourcesContent":["import Turtle from \"react-turtle\";\r\nimport gradient from \"gradient-color\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nconst colors = gradient([\r\n  '#f102b7', // pink\r\n  '#03dbfd', // blue\r\n  '#39ff14', // green\r\n  '#dff405', // yellow\r\n  '#f85a01', // orange\r\n  '#f102b7' // pink\r\n], 250)\r\n\r\n\r\nfunction TurtleCanvas() {\r\n  const settings = useSelector(state => {\r\n    return state.settings\r\n  });\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  if (settings) {\r\n    const { lowerBound, upperBound, zoom, numRuns, angle, startSeed, growth, strandSize, alpha } = settings;\r\n    return (<Turtle\r\n      animated={true}\r\n      width={1400}\r\n      height={880}\r\n      pixelated={true}\r\n      draw={turtle => {\r\n\r\n        turtle.home = () => turtle.goto(0, 0)\r\n\r\n        return (i) => {\r\n          turtle._ctx.globalAlpha = alpha;\r\n          const logistic = ({ r, x }) => r * x * (1 - x)\r\n\r\n          const logisticRun = ({ r }) => {\r\n            dispatch({\r\n              type: \"SET_R\",\r\n              r\r\n            });\r\n            turtle.setcolor(colors[i % colors.length]);\r\n            let x = startSeed;\r\n            const percentageRun = 1 - (numRuns - i) / numRuns;\r\n            const growthModifier = 1 + (growth - 1) * percentageRun;\r\n            for (let j = 0; j < strandSize; j++) {\r\n              x = logistic({ r, x });\r\n              turtle.forward(zoom * x * growthModifier);\r\n              turtle.right(angle * x);\r\n            }\r\n          }\r\n\r\n          turtle.penup();\r\n          turtle.home();\r\n          turtle.pendown();\r\n          logisticRun({\r\n            r: ((upperBound - lowerBound) / numRuns) * i + lowerBound\r\n          })\r\n          turtle.stroke();\r\n          return i < numRuns;\r\n        };\r\n      }}\r\n    />\r\n    );\r\n  } else {\r\n    return <div style={{ minHeight: 800 }} />\r\n  }\r\n}\r\n\r\nexport default TurtleCanvas;\r\n","import React from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { Formik } from \"formik\";\r\nimport { Form, Input, SubmitButton } from \"formik-semantic-ui-react\";\r\nimport { useDispatch } from 'react-redux';\r\n\r\nconst Configuration = () => {\r\n\r\n  const { r } = useSelector(state => state.logistic);\r\n  const initialValues = useSelector(state => state.settings);\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <div style={{ textAlign: \"left\" }}>\r\n      <Formik\r\n        initialValues={initialValues}\r\n        onSubmit={(settings) => dispatch({\r\n          type: \"SET_SETTINGS\",\r\n          settings\r\n        })}\r\n      >\r\n        <Form size=\"tiny\" style={{ width: \"300px\", margin: \"20px\", textAlign: \"left\" }}>\r\n          <Input\r\n            id=\"input-numRuns\"\r\n            inputLabel=\"# of runs\"\r\n            name=\"numRuns\"\r\n            type=\"number\"\r\n            focus\r\n            fluid\r\n            errorPrompt\r\n          />\r\n          <Input\r\n            id=\"input-lowerBound\"\r\n            inputLabel=\"Lower Bound of R\"\r\n            name=\"lowerBound\"\r\n            type=\"number\"\r\n            step={0.01}\r\n            focus\r\n            fluid\r\n            errorPrompt\r\n          />\r\n          <Input\r\n            id=\"input-upperBound\"\r\n            inputLabel=\"Upper Bound of R\"\r\n            name=\"upperBound\"\r\n            step={0.01}\r\n            type=\"number\"\r\n            focus\r\n            fluid\r\n            errorPrompt\r\n          />\r\n          <Input\r\n            id=\"input-rstart\"\r\n            inputLabel=\"Start seed\"\r\n            name=\"startSeed\"\r\n            type=\"number\"\r\n            step={0.1}\r\n            focus\r\n            fluid\r\n            errorPrompt\r\n          />\r\n          <Input\r\n            id=\"input-angle\"\r\n            inputLabel=\"Angle\"\r\n            name=\"angle\"\r\n            type=\"number\"\r\n            focus\r\n            fluid\r\n            errorPrompt\r\n          />\r\n          <Input\r\n            id=\"input-zoom\"\r\n            inputLabel=\"Zoom\"\r\n            name=\"zoom\"\r\n            type=\"number\"\r\n            focus\r\n            fluid\r\n            errorPrompt\r\n          />\r\n          <Input\r\n            id=\"input-growth\"\r\n            inputLabel=\"Growth target\"\r\n            name=\"growth\"\r\n            type=\"number\"\r\n            focus\r\n            fluid\r\n            errorPrompt\r\n          />\r\n          <Input\r\n            id=\"input-strand\"\r\n            inputLabel=\"Strand size\"\r\n            name=\"strandSize\"\r\n            type=\"number\"\r\n            focus\r\n            fluid\r\n            errorPrompt\r\n          />\r\n          <Input\r\n            id=\"input-alpha\"\r\n            inputLabel=\"Strand alpha\"\r\n            name=\"alpha\"\r\n            type=\"number\"\r\n            focus\r\n            fluid\r\n            errorPrompt\r\n          />\r\n          <SubmitButton fluid primary loading={false}>\r\n            Run\r\n          </SubmitButton>\r\n        </Form>\r\n      </Formik>\r\n      R: {Math.round(r * 10000) / 10000}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Configuration;","import './App.css';\nimport TurtleCanvas from \"./turtlecanvas\";\nimport Configuration from './configuration';\nimport {\n  Menu,\n  Segment,\n  Sidebar,\n} from 'semantic-ui-react'\nimport { useDispatch } from 'react-redux';\n\nfunction App() {\n  const dispatch = useDispatch();\n  dispatch({\n    type: \"SET_SETTINGS_FROM_URL\",\n    querystring: window.location.search\n  });\n  return (\n    <div className=\"App\">\n      <Sidebar.Pushable as={Segment}>\n        <Sidebar\n          as={Menu}\n          animation='push'\n          icon='labeled'\n          visible\n          width=\"wide\"\n        >\n          <Configuration/>\n        </Sidebar>\n\n        <Sidebar.Pusher>\n          <Segment basic style={{ backgroundColor: \"black\" }}>\n            <TurtleCanvas />\n          </Segment>\n        </Sidebar.Pusher>\n      </Sidebar.Pushable>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// Our initial state we use to hydrate\r\nconst initialState = {\r\n  lowerBound: 3.7,\r\n  upperBound: 3.9,\r\n  numRuns: 3000,\r\n  zoom: 30,\r\n  angle: 540,\r\n  startSeed: .5,\r\n  growth: .1,\r\n  strandSize: 300,\r\n  alpha: 0.1\r\n};\r\n\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n  \r\n\r\n    case \"SET_SETTINGS\": {\r\n      const newState = {\r\n        ...state,\r\n        ...action.settings,\r\n      }\r\n      const url = new URL(window.location);\r\n      Object.keys(newState).forEach(key => {\r\n        url.searchParams.set(key, newState[key]);\r\n      })\r\n      window.history.pushState({}, '', url);\r\n\r\n      return {\r\n        ...state,\r\n        ...action.settings,\r\n      };\r\n    }\r\n\r\n    case \"SET_SETTINGS_FROM_URL\": {\r\n      const newState = {};\r\n      const params = new URLSearchParams(action.querystring);\r\n      params.forEach((value, key) => {\r\n        newState[key] = parseFloat(value);\r\n      })\r\n\r\n      return {\r\n        ...state,\r\n        ...newState\r\n      }\r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n\r\nexport default reducer;\r\n","// Our initial state we use to hydrate\r\nconst initialState = {\r\n  r: null\r\n};\r\n\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case \"SET_R\":\r\n      return {\r\n        ...state,\r\n        r: action.r,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n\r\nexport default reducer;\r\n","import settings from \"./settings\"\r\nimport logistic from \"./logistic\";\r\n\r\nconst reducers =  {\r\n  settings,\r\n  logistic\r\n};\r\n\r\nexport default reducers;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from \"react-redux\";\nimport thunk from \"redux-thunk\";\nimport { applyMiddleware, createStore, combineReducers } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport 'semantic-ui-css/semantic.min.css'\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nimport reducers from \"./reducers\";\nconst middleware = [thunk];\nconst middlewareEnhancer = applyMiddleware(...middleware);\n\nconst store = createStore(\n  combineReducers(reducers),\n  composeWithDevTools(middlewareEnhancer)\n);\nconst params = new URLSearchParams(window.location.search);\nconsole.log(params);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n    <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}